// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: gerador_id.proto

package go_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeradorIDClient is the client API for GeradorID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeradorIDClient interface {
	GerarId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IdReply, error)
}

type geradorIDClient struct {
	cc grpc.ClientConnInterface
}

func NewGeradorIDClient(cc grpc.ClientConnInterface) GeradorIDClient {
	return &geradorIDClient{cc}
}

func (c *geradorIDClient) GerarId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, "/geradorid.GeradorID/GerarId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeradorIDServer is the server API for GeradorID service.
// All implementations must embed UnimplementedGeradorIDServer
// for forward compatibility
type GeradorIDServer interface {
	GerarId(context.Context, *emptypb.Empty) (*IdReply, error)
	mustEmbedUnimplementedGeradorIDServer()
}

// UnimplementedGeradorIDServer must be embedded to have forward compatible implementations.
type UnimplementedGeradorIDServer struct {
}

func (UnimplementedGeradorIDServer) GerarId(context.Context, *emptypb.Empty) (*IdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GerarId not implemented")
}
func (UnimplementedGeradorIDServer) mustEmbedUnimplementedGeradorIDServer() {}

// UnsafeGeradorIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeradorIDServer will
// result in compilation errors.
type UnsafeGeradorIDServer interface {
	mustEmbedUnimplementedGeradorIDServer()
}

func RegisterGeradorIDServer(s grpc.ServiceRegistrar, srv GeradorIDServer) {
	s.RegisterService(&GeradorID_ServiceDesc, srv)
}

func _GeradorID_GerarId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeradorIDServer).GerarId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geradorid.GeradorID/GerarId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeradorIDServer).GerarId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GeradorID_ServiceDesc is the grpc.ServiceDesc for GeradorID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeradorID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geradorid.GeradorID",
	HandlerType: (*GeradorIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GerarId",
			Handler:    _GeradorID_GerarId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gerador_id.proto",
}
